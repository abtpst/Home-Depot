'''
Created on Nov 2, 2016

@author: abhijit.tomar
'''
import warnings
warnings.filterwarnings('ignore')
import time
import pandas as pd
from sklearn.ensemble import ExtraTreesRegressor,RandomForestRegressor,GradientBoostingRegressor,VotingClassifier
from sklearn import grid_search
import random
random.seed(2016)
import Helper_Tools 
import json
from sklearn.metrics import make_scorer

RMSE = make_scorer(Helper_Tools.custom_mean_squared_error, greater_is_better=False)
    
def fit_predict_ensemble():
    
    start_time = time.time()
    # Load the features/attributes
    X_train,y_train,X_test,id_test = Helper_Tools.generate_train_test_splits('../../resources/data/dframes/final.csv')
    
    print('--- Features Set: %s minutes ---' % round(((time.time() - start_time) / 60), 2))
    print('Number of Features: ', len(X_train.columns.tolist()))
    
    # Initialize RandomForestRegressor using the optimal hyper-parameters generated by Random_Forest_Regressor module
    rf_param_map = json.load(open('../../resources/data/params/rfr_params.json'))
    rf_rgr = RandomForestRegressor(**rf_param_map)
    # Initialize ExtraTreesRegressor using the optimal hyper-parameters generated by Extra_Trees_Regressor module
    et_param_map = json.load(open('../../resources/data/params/etr_params.json'))
    et_rgr = ExtraTreesRegressor(**et_param_map)
    # Initialize GradientBoostingRegressor using the optimal hyper-parameters generated by Gradient_Boosting_Regressor module
    gb_param_map = json.load(open('../../resources/data/params/gbr_params.json'))
    gb_rgr = GradientBoostingRegressor(**gb_param_map)
    
    # Initialize VotingClassifier as a combination of RandomForestRegressor, ExtraTreesRegressor and GradientBoostingRegressor
    ensemble_clf = VotingClassifier(estimators=[('rf',rf_rgr),('et',et_rgr),('gb',gb_rgr)])
    # Set up possible values for hyper-parameters. These would be used by GridSearch to derive optimal set of hyper-parameters
    tuned_parameters = [{'weights':[[1,1,2]]}]
    # Generate optimal model using GridSearchCV
    model = grid_search.GridSearchCV(estimator=ensemble_clf, param_grid=tuned_parameters, n_jobs=1, cv=10, verbose=20, scoring=RMSE)
    # Fit the training data on the optimal model
    print ('Fitting')
    model.fit(X_train, y_train)

    # Show the best parameters and save
    print('--- Grid Search Completed: %s minutes ---' % round(((time.time() - start_time) / 60), 2))
    print('Best Params:')
    print(model.best_params_)
    with open('../../resources/data/params/ensemble_params.json', 'w') as outfile:
        json.dump(model.best_params_, outfile)
    print('Best CV Score:')
    print(model.best_score_)
    print ('Predicting')
    
    y_pred=model.predict(X_test)
    for i in range(len(y_pred)):
        if y_pred[i] < 1.0:
            y_pred[i] = 1.0
        if y_pred[i] > 3.0:
            y_pred[i] = 3.0
    
    # Save the submission
    pd.DataFrame({'id': id_test, 'relevance': y_pred}).to_csv('../../resources/results/submission_ensemble.csv', index=False)
    print('--- Submission Generated: %s minutes ---' % round(((time.time() - start_time) / 60), 2))